"use strict";class Period{constructor(t,s){this.id=t,this.duration=s,this.remaining=s,this.target=0,this.status="initial",this.enabled=!1}get isCycle(){return this.id%2==0}start(){this.status="running"}end(){this.status="complete",this.remaining=0}actual(t){return this.target-t}adjust(t){const s=this.actual(t),i=s-1e3*Math.floor(s/1e3);return this.remaining=s-i,i}}class Cycle extends Period{constructor(t,s){super(t,s)}reset(t){this.status="initial",this.duration=t.cycleTime,this.remaining=t.cycleTime}pause(){this.status="paused"}autoStart(t){this.enabled=t.cycles}}class Break extends Period{constructor(t,s){super(t,s)}reset(t){this.status="initial",this.duration=t.breakTime,this.remaining=t.breakTime}skip(){this.end()}autoStart(t){this.enabled=t.breaks}}export{Cycle,Break};