"use strict";import{Timer}from"./Timer.js";import{Adjuster}from"./Adjuster.js";import{Utilities}from"./Utilities.js";const defaultSettings={theme:"light",notificationsEnabled:!0,notificationsSound:!0,autoStartCycles:!0,autoStartBreaks:!0,cycleMinutes:25,breakMinutes:5,totalCycles:4};let comms={port:null,open:!1},update=!1;const timer=new Timer;function handleOnInstalled(e){"install"===e.reason?runInstall():"update"===e.reason&&runUpdate()}function runInstall(){update=!0,chrome.storage.local.set(defaultSettings)}function runUpdate(){update=!0,chrome.storage.local.clear(),chrome.storage.local.set(defaultSettings)}function handleOnConnect(e){comms.port=e,comms.port.onDisconnect.addListener(handleOnDisconnect),comms.port.onMessage.addListener(handleMessage),comms.open=!0,timer.updateComms(comms.port,comms.open)}function handleOnDisconnect(){comms.open=!1,timer.updateComms(comms.port,comms.open)}function handleMessage(e){if("preload"===e.command&&!0===update){update=!1;let e=timer.formatState();e.update=!0,comms.port.postMessage(e)}else switch(e.command){case"start":timer.start();break;case"pause":timer.pause();break;case"skip":timer.skip();break;case"reset-cycle":timer.reset();break;case"reset-all":timer.resetAll();break;case"preload":timer.postState()}}function handleStorageChanges(e){for(let t in e){let a=e[t];const s=a.oldValue,n=a.newValue;if(void 0===s||void 0===n)return;switch(t){case"autoStartCycles":timer.updateAutoStart({cycles:a.newValue});break;case"autoStartBreaks":timer.updateAutoStart({breaks:a.newValue});break;case"cycleMinutes":timer.updateTime({cycleTime:6e4*a.newValue});break;case"breakMinutes":timer.updateTime({breakTime:6e4*a.newValue});break;case"totalCycles":timer.updateTotalPeriods(2*a.newValue-1)}}}setTimeout((()=>{Utilities.getStoredSettings().then((e=>{timer.init(e)}))}),200),chrome.runtime.onInstalled.addListener(handleOnInstalled),chrome.runtime.onConnect.addListener(handleOnConnect),chrome.storage.onChanged.addListener(handleStorageChanges),chrome.idle.onStateChanged.addListener((e=>{const t=timer.periods.current.status;if("running"!==t)return void console.log(`State ${e} - Timer status is ${t}. No need to sync.`);console.log(`State ${e} - Timer status is ${t}. Making adjustments.`);const a=Date.now();Adjuster.adjust(timer,a)}));