"use strict";import{Timeline}from"./Timeline.js";import{Notifications}from"./Notifications.js";import{Utilities}from"./Utilities.js";class Timer{constructor(){this.settings={autoStart:{cycles:!0,breaks:!0},cycleTime:0,breakTime:0,totalPeriods:0},this.comms={port:null,open:!1},this.periods=new Timeline,this.subtractor=0}init(t){this.settings=t,this.periods.build(this.settings),Notifications.clearAll(this.settings.totalPeriods)}updateAutoStart(t){this.settings.autoStart={...this.settings.autoStart,...t},this.periods.update({time:!1,targets:!0,autoStart:!0},Date.now(),this.settings)}updateTime(t){this.settings={...this.settings,...t},this.periods.update({time:!0,targets:!0,autoStart:!1},Date.now(),this.settings)}updateTotalPeriods(t){this.settings.totalPeriods=t,t<this.periods.timeline.length?this.periods.shorten(this.settings):t>this.periods.timeline.length&&this.periods.lengthen(this.settings)}start(){this.periods.update({time:!1,targets:!0,autoStart:!0},Date.now(),this.settings),this.periods.current.start(),this.runSubtractor(),this.postState()}end(){this.stopSubtractor(),this.periods.current.end(),this.notify(),this.periods.isLast?this.postState():this.next()}pause(){this.stopSubtractor(),this.periods.current.pause(),this.postState()}skip(){this.stopSubtractor(),this.periods.current.skip(),this.notify(),this.next()}reset(){this.stopSubtractor(),"initial"===this.periods.current.status&&this.periods.index>0?[1,2].forEach((()=>{this.periods.index-=1,this.periods.current.reset(this.settings),Notifications.clear(this.periods.index)})):this.periods.current.reset(this.settings),this.postState()}resetAll(){this.stopSubtractor(),this.periods.timeline.forEach((t=>t.reset(this.settings))),this.periods.index=0,this.postState(),Notifications.clearAll(this.settings.totalPeriods)}next(){this.periods.index+=1,this.periods.current.enabled?this.start():this.postState()}runSubtractor(){this.subtractor=setInterval((()=>{this.periods.current.remaining-=1e3,this.periods.current.remaining<0?this.end():this.postState()}),1e3)}stopSubtractor(){clearInterval(this.subtractor)}updateComms(t,s){this.comms.port=t,this.comms.open=s}postState(){this.comms.open&&this.comms.port.postMessage(this.formatState())}formatState(){return{period:this.periods.current.id,time:Utilities.parseMs(this.periods.current.remaining),status:this.periods.current.status,totalPeriods:this.settings.totalPeriods}}notify(){let t="";t=this.periods.isLast?"complete":this.periods.current.isCycle?"cycle":"break",Notifications.send(this.periods.current.id,this.settings.breakTime,t)}}export{Timer};