"use strict";import{Utilities}from"./Utilities.js";const idTemplate="notification-for-period";class Notifications{static async send(t,e,i){const{enabled:s,sound:o}=await this.checkSettings();if(s){o&&this.playSound();const s=this.build(t,e,i);this.publish(s)}}static build(t,e,i){let s,o,a=`${idTemplate}-${t}`;switch(i){case"cycle":s=`Cycle ${Utilities.mapCycle(t)} complete!`,o=`Great job. Take ${Utilities.msToMin(e)}.`;break;case"break":s=`Break ${Utilities.mapBreak(t)} is over.`,o="Time to grind!";break;case"complete":s="You did it! All cycles are complete.",o="Take a long break ðŸ§˜"}return{id:a,title:s,message:o}}static checkSettings(){return new Promise((t=>{chrome.storage.local.get(["notificationsEnabled","notificationsSound"],(e=>t({enabled:e.notificationsEnabled,sound:e.notificationsSound})))}))}static playSound(){document.querySelector("#notifications").play().then((()=>console.log("Played sound."))).catch((t=>console.log(t)))}static publish(t){chrome.notifications.create(t.id,{type:"basic",iconUrl:chrome.runtime.getURL("../assets/icons/icon-128.png"),title:t.title,message:t.message})}static clear(t){chrome.notifications.clear(`${idTemplate}-${t}`)}static clearAll(t){for(let e=0;e<t;e+=1)this.clear(e)}}export{Notifications};